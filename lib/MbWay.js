function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "react"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("react"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react);
    global.MbWay = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, React) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports["default"] = void 0;
  React = _interopRequireWildcard(React);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

  var SvgMbWay = function SvgMbWay(props) {
    return /*#__PURE__*/React.createElement("div", {
      className: props.className,
      style: props.style
    }, /*#__PURE__*/React.createElement("svg", _extends({
      viewBox: "0 0 60 40",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props), /*#__PURE__*/React.createElement("rect", {
      width: 60,
      height: 40,
      fill: "white"
    }), /*#__PURE__*/React.createElement("path", {
      d: "M9.67627 22.1053C10.3548 20.6149 10.9807 19.2144 11.6252 17.8231C12.1365 16.7108 12.6694 15.6108 13.1931 14.5046C13.322 14.2033 13.5342 13.945 13.8048 13.76C14.0754 13.5751 14.3931 13.4711 14.7207 13.4604C15.7587 13.3861 16.1026 13.668 16.2482 14.6998L17.624 24.4912C17.7386 25.3061 17.5558 25.6407 16.9423 25.7492C16.1274 25.8948 15.613 25.5633 15.5015 24.7669C15.1916 22.4585 14.8818 20.1501 14.5719 17.8417C14.5502 17.4106 14.4394 16.9886 14.2466 16.6023C13.819 17.5319 13.4131 18.3654 13.0691 19.2144C12.4092 20.8411 11.7864 22.4833 11.1481 24.1162L11.0179 24.4478C10.9287 24.7229 10.756 24.9635 10.524 25.1361C10.2919 25.3088 10.0119 25.405 9.72275 25.4114C9.43267 25.427 9.1455 25.3469 8.90535 25.1835C8.66521 25.02 8.48537 24.7822 8.39348 24.5067C7.99068 23.5771 7.61266 22.6135 7.22534 21.6622C6.62836 20.2038 6.03035 18.7444 5.4313 17.284C5.34145 17.0702 5.21441 16.875 5.06258 16.593C4.93387 16.8333 4.86579 17.1013 4.86427 17.3739C4.53893 19.8031 4.21978 22.2292 3.89134 24.6616C3.78909 25.4548 3.47924 25.7616 2.78827 25.7802C1.96096 25.8049 1.62013 25.4424 1.72548 24.6182C1.92998 23.0163 2.17166 21.4143 2.39476 19.8124C2.62714 18.1547 2.85953 16.4877 3.09192 14.83C3.16629 14.3156 3.1446 13.7331 3.81388 13.5317C4.16944 13.4037 4.5553 13.3858 4.92118 13.4803C5.28706 13.5748 5.61599 13.7774 5.86509 14.0615C6.18275 14.4644 6.44245 14.9097 6.63663 15.3846L9.67627 22.1053Z",
      fill: "#060606"
    }), /*#__PURE__*/React.createElement("path", {
      d: "M22.9348 25.7616C21.8906 25.7616 20.8433 25.7616 19.796 25.7616C19.0865 25.7616 18.7301 25.4207 18.7301 24.7019C18.7157 21.3245 18.7157 17.9471 18.7301 14.5697C18.7301 13.7765 19.04 13.4883 19.8177 13.479C21.556 13.4604 23.2943 13.4294 25.0294 13.5007C26.8699 13.5751 28.2147 14.7587 28.5122 16.404C28.6297 17.1533 28.4652 17.9194 28.0505 18.5544C27.815 18.9541 27.8057 19.1958 28.2395 19.5087C29.4231 20.3577 29.9375 21.5538 29.5719 22.9791C29.4163 23.6711 29.0532 24.2992 28.5311 24.7793C28.0089 25.2594 27.3526 25.5686 26.65 25.6655C25.4322 25.901 24.1773 25.7523 22.9348 25.7616ZM20.8309 19.5831C20.8309 20.8473 20.8464 22.1115 20.8309 23.3726C20.8309 23.7537 20.9146 23.887 21.3205 23.8777C22.7582 23.8529 24.2021 23.8777 25.6429 23.8777C25.9989 23.8782 26.3508 23.8022 26.6747 23.6546C26.9871 23.5252 27.2535 23.3052 27.4396 23.023C27.6257 22.7408 27.723 22.4093 27.7189 22.0712C27.7034 21.7426 27.5879 21.4266 27.3881 21.1653C27.1882 20.904 26.9134 20.7098 26.6004 20.6087C26.0989 20.4245 25.5665 20.3393 25.0325 20.3577C24.3632 20.3577 23.6909 20.3577 23.0216 20.3299C22.9067 20.3355 22.7918 20.3172 22.6843 20.2763C22.5768 20.2354 22.4789 20.1726 22.3968 20.092C22.3148 20.0113 22.2502 19.9146 22.2074 19.8078C22.1645 19.7011 22.1442 19.5866 22.1478 19.4716C22.1478 18.9665 22.4577 18.6288 23.0433 18.5637C23.2974 18.5358 23.5545 18.5637 23.8117 18.5389C24.2641 18.511 24.7196 18.5017 25.1689 18.4398C26.0674 18.3158 26.6654 17.6527 26.6283 16.8626C26.5983 16.4525 26.413 16.0693 26.1101 15.7912C25.8072 15.513 25.4096 15.361 24.9984 15.366C23.759 15.335 22.5196 15.366 21.2802 15.3443C20.9053 15.3443 20.8216 15.4497 20.8247 15.806C20.8309 17.0578 20.8309 18.322 20.8309 19.5831Z",
      fill: "#060606"
    }), /*#__PURE__*/React.createElement("path", {
      d: "M15.9879 32.2127C12.592 32.2127 9.19497 32.2127 5.79693 32.2127C5.04709 32.2127 4.29724 32.2622 3.5474 32.2437C1.17704 32.1817 0.653389 30.4155 1.19563 28.5564C1.33816 28.0699 1.76576 27.915 2.23983 27.9584C2.47 27.9653 2.69065 28.0519 2.86413 28.2033C3.0376 28.3547 3.15316 28.5617 3.19107 28.7888C3.19424 28.828 3.19424 28.8674 3.19107 28.9065C3.31811 30.3133 3.31811 30.3133 4.74033 30.3133H27.3595C27.5764 30.3133 27.7933 30.3133 28.0102 30.3133C28.0912 30.3229 28.1733 30.3128 28.2496 30.2839C28.3259 30.2551 28.3941 30.2083 28.4485 30.1475C28.5029 30.0867 28.5419 30.0138 28.5621 29.9348C28.5824 29.8557 28.5833 29.773 28.5648 29.6936C28.5417 29.4381 28.5324 29.1816 28.5369 28.9251C28.5511 28.6901 28.6453 28.4669 28.8038 28.2928C28.9623 28.1186 29.1756 28.0039 29.4083 27.9677C29.641 27.9315 29.8791 27.976 30.083 28.0938C30.2869 28.2116 30.4444 28.3956 30.5293 28.6153C31.149 30.62 30.3527 32.2406 28.1248 32.2189C24.0844 32.1879 20.0377 32.2127 15.9879 32.2127Z",
      fill: "#FD0506"
    }), /*#__PURE__*/React.createElement("path", {
      d: "M15.8981 7H24.9024C26.5973 7 27.3378 7.57013 27.7933 9.20615C27.8677 9.47262 27.9389 9.74219 27.9978 10.0118C28.0352 10.1445 28.045 10.2835 28.0266 10.4202C28.0082 10.5568 27.962 10.6883 27.8909 10.8064C27.8198 10.9246 27.7252 11.0269 27.613 11.1071C27.5009 11.1874 27.3735 11.2438 27.2387 11.2729C27.1071 11.3163 26.9682 11.3327 26.8301 11.3213C26.6921 11.3098 26.5577 11.2707 26.4351 11.2062C26.3125 11.1417 26.2042 11.0532 26.1165 10.9459C26.0288 10.8387 25.9637 10.7149 25.9249 10.5819C25.8925 10.489 25.8676 10.3937 25.8505 10.2968C25.5748 8.98925 25.4787 8.90869 24.1154 8.90869H7.64364C6.33917 8.90869 6.22452 9.00165 5.95495 10.272C5.78453 11.0715 5.33525 11.4247 4.64428 11.2946C4.51554 11.2841 4.39049 11.2464 4.27744 11.1839C4.1644 11.1214 4.06593 11.0356 3.98857 10.9322C3.91121 10.8287 3.85673 10.71 3.82875 10.5839C3.80077 10.4578 3.79992 10.3272 3.82627 10.2008C3.87344 9.82858 3.94591 9.46004 4.04316 9.0977C4.43977 7.6197 5.23609 7 6.77606 7C9.81467 7 12.8553 7 15.8981 7Z",
      fill: "#FD0506"
    }), /*#__PURE__*/React.createElement("path", {
      d: "M39.8001 18.7744C39.6094 19.1486 39.4698 19.5467 39.3849 19.958C39.1153 20.8442 38.8643 21.7366 38.6009 22.6259C38.4491 23.1371 38.1733 23.5244 37.5722 23.5058C36.9711 23.4872 36.6922 23.1309 36.559 22.6011C36.0323 20.5354 35.5045 18.4697 34.9757 16.404C34.8858 16.0477 34.8734 15.71 35.3134 15.5984C35.7534 15.4869 36.0756 15.5984 36.1934 16.119C36.5652 17.7519 36.9556 19.3817 37.3429 21.0115C37.3868 21.252 37.4938 21.4765 37.6528 21.6622C37.9771 20.4786 38.3014 19.296 38.6257 18.1144C38.7775 17.5629 38.9356 17.0113 39.0657 16.4567C39.1711 16.0229 39.3973 15.744 39.8744 15.7471C40.3516 15.7502 40.5561 16.057 40.6614 16.4815C41.0147 17.8975 41.3679 19.3135 41.7304 20.7265C41.7622 21.0349 41.9015 21.3223 42.1239 21.5383C42.3223 20.7605 42.5113 20.0324 42.691 19.3042C42.9513 18.2538 43.2177 17.2034 43.4532 16.1437C43.4562 16.0436 43.4834 15.9456 43.5326 15.8583C43.5817 15.7709 43.6514 15.6968 43.7354 15.6423C43.8195 15.5878 43.9156 15.5544 44.0154 15.5452C44.1152 15.5359 44.2157 15.551 44.3084 15.5891C44.7794 15.7007 44.7794 16.0415 44.6802 16.4257C44.1679 18.4129 43.6587 20.3991 43.1527 22.3842C43.101 22.5537 43.0399 22.7202 42.9698 22.883C42.9008 23.0825 42.7659 23.2525 42.5874 23.3652C42.4089 23.4778 42.1974 23.5263 41.9876 23.5027C41.7797 23.5074 41.5766 23.4403 41.4124 23.3128C41.2482 23.1852 41.1329 23.005 41.0859 22.8025C40.7513 21.6467 40.4074 20.4941 40.0634 19.3414C40.0384 19.1291 39.9462 18.9304 39.8001 18.7744V18.7744Z",
      fill: "#060606"
    }), /*#__PURE__*/React.createElement("path", {
      d: "M52.126 22.8892C52.1409 23.0265 52.1017 23.1643 52.0166 23.2731C51.9315 23.3819 51.8073 23.4532 51.6705 23.4718C51.6004 23.4981 51.5257 23.5101 51.4509 23.507C51.376 23.5039 51.3026 23.4858 51.2349 23.4537C51.1673 23.4216 51.1068 23.3762 51.057 23.3202C51.0073 23.2642 50.9693 23.1988 50.9454 23.1278C50.7688 22.7126 50.6139 22.285 50.4682 21.8574C50.4257 21.6628 50.3117 21.4911 50.1488 21.3764C49.9859 21.2617 49.7859 21.2122 49.5883 21.2377C48.9004 21.2625 48.2094 21.2594 47.5216 21.2377C47.3436 21.2192 47.1649 21.265 47.0178 21.3667C46.8706 21.4684 46.7647 21.6194 46.719 21.7924C46.5796 22.1828 46.465 22.5825 46.2945 22.9574C46.2669 23.0485 46.2204 23.1327 46.1581 23.2046C46.0957 23.2765 46.019 23.3345 45.9328 23.3749C45.8466 23.4152 45.7529 23.4369 45.6577 23.4387C45.5626 23.4404 45.4681 23.4221 45.3805 23.385C44.9839 23.2115 45.0211 22.8366 45.1667 22.4554C45.9599 20.4393 46.748 18.4212 47.5309 16.4009C47.723 15.9083 48.0204 15.5519 48.5998 15.5302C49.1793 15.5085 49.4117 15.9052 49.5945 16.373C50.3753 18.3726 51.1613 20.3701 51.9524 22.3656C52.0268 22.5639 52.0826 22.7498 52.126 22.8892ZM48.5874 16.9153C48.1599 18.0029 47.7942 18.9231 47.4348 19.8434C47.3697 20.0138 47.4348 20.0975 47.6269 20.0975H49.8485C49.424 19.0068 49.0274 18.0369 48.5874 16.9153Z",
      fill: "#060606"
    }), /*#__PURE__*/React.createElement("path", {
      d: "M55.0726 23.4748C54.6512 23.4748 54.3631 23.2858 54.422 22.8334C54.6327 21.1447 54.0935 19.7039 53.0989 18.3592C52.7353 17.7743 52.4242 17.1584 52.1693 16.5186C52.0082 16.2088 51.9215 15.868 52.3274 15.6573C52.4059 15.6046 52.4955 15.5707 52.5893 15.5581C52.683 15.5454 52.7784 15.5544 52.8681 15.5843C52.9578 15.6142 53.0395 15.6642 53.1069 15.7306C53.1743 15.797 53.2256 15.8779 53.2569 15.9671C53.7423 16.9111 54.2329 17.8551 54.7287 18.7992C54.8062 18.9479 54.8217 19.1865 55.0386 19.1896C55.2555 19.1927 55.2833 18.9634 55.3484 18.8146C55.8039 17.9409 56.2501 17.0609 56.6994 16.184C56.9256 15.7347 57.3934 15.4713 57.6878 15.6758C58.1154 15.9857 58.0503 16.3544 57.8117 16.7603C57.2416 17.7333 56.7211 18.731 56.1292 19.6853C55.7802 20.2133 55.6156 20.8419 55.6614 21.4732C55.6846 21.9263 55.6846 22.3803 55.6614 22.8334C55.6645 23.2022 55.5095 23.4748 55.0726 23.4748Z",
      fill: "#060606"
    })));
  };

  var _default = SvgMbWay;
  _exports["default"] = _default;
});